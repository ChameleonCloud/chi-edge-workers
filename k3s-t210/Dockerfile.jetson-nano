FROM balenalib/jetson-nano-ubuntu:bionic-build-20230911 as build

ARG K3S_VERSION=v1.27.16%2Bk3s1

COPY install-k3s.sh /docker/install-k3s.sh
RUN /docker/install-k3s.sh "aarch64"

FROM balenalib/jetson-nano-ubuntu:bionic-run-20230911 as run

ENV distribution="ubuntu18.04"
RUN curl -s -L https://nvidia.github.io/libnvidia-container/gpgkey | sudo apt-key add - && \
    curl -s -L https://nvidia.github.io/libnvidia-container/${distribution}/libnvidia-container.list | sudo tee /etc/apt/sources.list.d/libnvidia-container.list && \
    sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit libnvidia-container1 libnvidia-container0 libnvidia-container-tools \ 
    nvidia-container-csv-cudnn nvidia-container-csv-visionworks nvidia-container-csv-tensorrt nvidia-container-csv-cuda

RUN install_packages cuda-toolkit-10-2 

# Download and install BSP binaries for L4T 32.7.3
RUN install_packages wget tar lbzip2 python3 libegl1 && \
    wget "https://developer.nvidia.com/downloads/remetpack-463r32releasev73t210jetson-210linur3273aarch64tbz2" && \
    tar -xf "remetpack-463r32releasev73t210jetson-210linur3273aarch64tbz2" && \
    cd Linux_for_Tegra && \
    sed -i 's/config.tbz2\"/config.tbz2\" --exclude=etc\/hosts --exclude=etc\/hostname/g' apply_binaries.sh && \
    sed -i 's/install --owner=root --group=root \"${QEMU_BIN}\" \"${L4T_ROOTFS_DIR}\/usr\/bin\/\"/#install --owner=root --group=root \"${QEMU_BIN}\" \"${L4T_ROOTFS_DIR}\/usr\/bin\/\"/g' nv_tegra/nv-apply-debs.sh && \
    sed -i 's/LC_ALL=C chroot . mount -t proc none \/proc/ /g' nv_tegra/nv-apply-debs.sh && \
    sed -i 's/umount ${L4T_ROOTFS_DIR}\/proc/ /g' nv_tegra/nv-apply-debs.sh && \
    sed -i 's/chroot . \//  /g' nv_tegra/nv-apply-debs.sh && \
    ./apply_binaries.sh -r / --target-overlay && cd .. \
    rm -rf "remetpack-463r32releasev73t210jetson-210linur3273aarch64tbz2" && \
    rm -rf Linux_for_Tegra && \
    echo "/usr/lib/aarch64-linux-gnu/tegra" > /etc/ld.so.conf.d/nvidia-tegra.conf && ldconfig

COPY --from=build /usr/local/bin/k3s /usr/local/bin/k3s

# Override default containerd config.toml with template file.
# Copied from https://github.com/k3s-io/k3s/blob/master/pkg/agent/templates/templates_linux.go
COPY config.toml.tmpl /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl

COPY start.sh /docker/start.sh
CMD ["/docker/start.sh"]
